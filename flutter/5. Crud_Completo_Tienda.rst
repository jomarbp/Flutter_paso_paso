*CRUD COMPLETO DE TIENDA*

**1. Agregar el siguiente código "categoria.dart"**
Escribir el comando: 

Linea::

    class Categoria {
      final int? id;
      final String nombre;
      final String descripcion;
    
      Categoria({
        this.id,
        required this.nombre,
        required this.descripcion,
      });
    
      factory Categoria.fromJson(Map<String, dynamic> json) {
        return Categoria(
          id: int.parse(json['id'].toString()),
          nombre: json['nombre'],
          descripcion: json['descripcion'],
        );
      }
    
      Map<String, dynamic> toJson() {
        return {
          'id': id,
          'nombre': nombre,
          'descripcion': descripcion,
        };
      }
    }

**2. producto.dart**

Linea::

        class Producto {
          final int? id;
          final String nombre;
          final String descripcion;
          final double precio;
          final int stock;
          final int categoriaId;
          final String? imagenUrl;
          final bool estado;
          final String? categoriaNombre;
        
          Producto({
            this.id,
            required this.nombre,
            required this.descripcion,
            required this.precio,
            required this.stock,
            required this.categoriaId,
            this.imagenUrl,
            this.estado = true,
            this.categoriaNombre,
          });
        
          factory Producto.fromJson(Map<String, dynamic> json) {
            return Producto(
              id: int.parse(json['id'].toString()),
              nombre: json['nombre'],
              descripcion: json['descripcion'],
              precio: double.parse(json['precio'].toString()),
              stock: int.parse(json['stock'].toString()),
              categoriaId: int.parse(json['categoria_id'].toString()),
              imagenUrl: json['imagen_url'],
              estado: json['estado'] == '1' || json['estado'] == true,
              categoriaNombre: json['categoria_nombre'],
            );
          }
        
          Map<String, dynamic> toJson() {
            return {
              'id': id,
              'nombre': nombre,
              'descripcion': descripcion,
              'precio': precio,
              'stock': stock,
              'categoria_id': categoriaId,
              'imagen_url': imagenUrl,
              'estado': estado,
            };
          }
        }

3. **crear_categoria.dart**

Linea::

    import 'package:flutter/material.dart';
    import 'package:http/http.dart' as http;
    import 'dart:convert';
    
    class CrearCategoria extends StatefulWidget {
      @override
      _CrearCategoriaState createState() => _CrearCategoriaState();
    }
    
    class _CrearCategoriaState extends State<CrearCategoria> {
      final _formKey = GlobalKey<FormState>();
      final _nombreController = TextEditingController();
      final _descripcionController = TextEditingController();
      bool _isLoading = false;
    
      Future<void> _guardarCategoria() async {
        if (_formKey.currentState!.validate()) {
          setState(() {
            _isLoading = true;
          });
    
          try {
            final response = await http.post(
              Uri.parse('http://localhost/tienda/api_tienda.php?resource=categorias'),
              headers: {'Content-Type': 'application/json'},
              body: jsonEncode({
                'nombre': _nombreController.text,
                'descripcion': _descripcionController.text,
              }),
            );
    
            if (response.statusCode == 200) {
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(
                  content: Text('Categoría creada con éxito'),
                  backgroundColor: Colors.green,
                ),
              );
              Navigator.pop(context);
            }
          } catch (e) {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                content: Text('Error al crear la categoría'),
                backgroundColor: Colors.red,
              ),
            );
          } finally {
            setState(() {
              _isLoading = false;
            });
          }
        }
      }
    
      @override
      Widget build(BuildContext context) {
        return Scaffold(
          appBar: AppBar(
            title: Text(
              'Nueva Categoría',
              style: TextStyle(fontWeight: FontWeight.bold),
            ),
            centerTitle: true,
            backgroundColor: Colors.blue,
            elevation: 0,
          ),
          body: Container(
            decoration: BoxDecoration(
              gradient: LinearGradient(
                begin: Alignment.topCenter,
                end: Alignment.bottomCenter,
                colors: [Colors.blue.shade50, Colors.white],
              ),
            ),
            child: SingleChildScrollView(
              padding: EdgeInsets.all(16.0),
              child: Card(
                elevation: 5,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(15),
                ),
                child: Padding(
                  padding: EdgeInsets.all(16.0),
                  child: Form(
                    key: _formKey,
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.stretch,
                      children: [
                        TextFormField(
                          controller: _nombreController,
                          decoration: InputDecoration(
                            labelText: 'Nombre',
                            border: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(10),
                            ),
                            prefixIcon: Icon(Icons.category),
                          ),
                          validator: (value) {
                            if (value == null || value.isEmpty) {
                              return 'Por favor ingrese un nombre';
                            }
                            return null;
                          },
                        ),
                        SizedBox(height: 20),
                        TextFormField(
                          controller: _descripcionController,
                          decoration: InputDecoration(
                            labelText: 'Descripción',
                            border: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(10),
                            ),
                            prefixIcon: Icon(Icons.description),
                          ),
                          maxLines: 3,
                          validator: (value) {
                            if (value == null || value.isEmpty) {
                              return 'Por favor ingrese una descripción';
                            }
                            return null;
                          },
                        ),
                        SizedBox(height: 24),
                        ElevatedButton(
                          onPressed: _isLoading ? null : _guardarCategoria,
                          child: _isLoading
                              ? SizedBox(
                                  height: 20,
                                  width: 20,
                                  child: CircularProgressIndicator(
                                    color: Colors.white,
                                    strokeWidth: 2,
                                  ),
                                )
                              : Text(
                                  'Guardar Categoría',
                                  style: TextStyle(fontSize: 16),
                                ),
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.blue,
                            padding: EdgeInsets.symmetric(vertical: 15),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(10),
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            ),
          ),
        );
      }
    }

4.  **editar_categoria.dart**

Linea::

    import 'package:flutter/material.dart';
    import 'package:http/http.dart' as http;
    import 'dart:convert';
    
    class EditarCategoria extends StatefulWidget {
      @override
      _EditarCategoriaState createState() => _EditarCategoriaState();
    }
    
    class _EditarCategoriaState extends State<EditarCategoria> {
      final _formKey = GlobalKey<FormState>();
      final _nombreController = TextEditingController();
      final _descripcionController = TextEditingController();
      bool _isLoading = false;
      late Map<String, dynamic> categoria;
    
      @override
      void didChangeDependencies() {
        super.didChangeDependencies();
        categoria = ModalRoute.of(context)!.settings.arguments as Map<String, dynamic>;
        _nombreController.text = categoria['nombre'];
        _descripcionController.text = categoria['descripcion'];
      }
    
      Future<void> _actualizarCategoria() async {
        if (_formKey.currentState!.validate()) {
          setState(() {
            _isLoading = true;
          });
    
          try {
            final response = await http.put(
              Uri.parse('http://localhost/tienda/api_tienda.php?resource=categorias'),
              headers: {'Content-Type': 'application/json'},
              body: jsonEncode({
                'id': categoria['id'],
                'nombre': _nombreController.text,
                'descripcion': _descripcionController.text,
              }),
            );
    
            if (response.statusCode == 200) {
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(
                  content: Text('Categoría actualizada con éxito'),
                  backgroundColor: Colors.green,
                ),
              );
              Navigator.pop(context);
            }
          } catch (e) {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                content: Text('Error al actualizar la categoría'),
                backgroundColor: Colors.red,
              ),
            );
          } finally {
            setState(() {
              _isLoading = false;
            });
          }
        }
      }
    
      @override
      Widget build(BuildContext context) {
        return Scaffold(
          appBar: AppBar(
            title: Text(
              'Editar Categoría',
              style: TextStyle(fontWeight: FontWeight.bold),
            ),
            centerTitle: true,
            backgroundColor: Colors.blue,
            elevation: 0,
          ),
          body: Container(
            decoration: BoxDecoration(
              gradient: LinearGradient(
                begin: Alignment.topCenter,
                end: Alignment.bottomCenter,
                colors: [Colors.blue.shade50, Colors.white],
              ),
            ),
            child: SingleChildScrollView(
              padding: EdgeInsets.all(16.0),
              child: Card(
                elevation: 5,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(15),
                ),
                child: Padding(
                  padding: EdgeInsets.all(16.0),
                  child: Form(
                    key: _formKey,
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.stretch,
                      children: [
                        TextFormField(
                          controller: _nombreController,
                          decoration: InputDecoration(
                            labelText: 'Nombre',
                            border: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(10),
                            ),
                            prefixIcon: Icon(Icons.category),
                          ),
                          validator: (value) {
                            if (value == null || value.isEmpty) {
                              return 'Por favor ingrese un nombre';
                            }
                            return null;
                          },
                        ),
                        SizedBox(height: 20),
                        TextFormField(
                          controller: _descripcionController,
                          decoration: InputDecoration(
                            labelText: 'Descripción',
                            border: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(10),
                            ),
                            prefixIcon: Icon(Icons.description),
                          ),
                          maxLines: 3,
                          validator: (value) {
                            if (value == null || value.isEmpty) {
                              return 'Por favor ingrese una descripción';
                            }
                            return null;
                          },
                        ),
                        SizedBox(height: 24),
                        ElevatedButton(
                          onPressed: _isLoading ? null : _actualizarCategoria,
                          child: _isLoading
                              ? SizedBox(
                                  height: 20,
                                  width: 20,
                                  child: CircularProgressIndicator(
                                    color: Colors.white,
                                    strokeWidth: 2,
                                  ),
                                )
                              : Text(
                                  'Actualizar Categoría',
                                  style: TextStyle(fontSize: 16),
                                ),
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.blue,
                            padding: EdgeInsets.symmetric(vertical: 15),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(10),
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            ),
          ),
        );
      }
    }

5.  **lista_categorias.dart**

Linea::

    import 'package:flutter/material.dart';
    import 'package:http/http.dart' as http;
    import 'dart:convert';
    import '../../models/categoria.dart';
    
    class ListaCategorias extends StatefulWidget {
      @override
      _ListaCategoriasState createState() => _ListaCategoriasState();
    }
    
    class _ListaCategoriasState extends State<ListaCategorias> {
      List<dynamic> categorias = [];
      bool isLoading = true;
    
      @override
      void initState() {
        super.initState();
        fetchCategorias();
      }
    
      Future<void> fetchCategorias() async {
        try {
          final response = await http.get(
            Uri.parse('http://localhost/tienda/api_tienda.php?resource=categorias'),
          );
          if (response.statusCode == 200) {
            setState(() {
              categorias = json.decode(response.body);
              isLoading = false;
            });
          }
        } catch (e) {
          setState(() {
            isLoading = false;
          });
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('Error al cargar las categorías')),
          );
        }
      }
    
      Future<void> eliminarCategoria(int id) async {
        try {
          final response = await http.delete(
            Uri.parse('http://localhost/tienda/api_tienda.php?resource=categorias&id=$id'),
          );
          if (response.statusCode == 200) {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                content: Text('Categoría eliminada con éxito'),
                backgroundColor: Colors.green,
              ),
            );
            fetchCategorias();
          }
        } catch (e) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('Error al eliminar la categoría'),
              backgroundColor: Colors.red,
            ),
          );
        }
      }
    
      @override
      Widget build(BuildContext context) {
        return Scaffold(
          appBar: AppBar(
            title: Text(
              'Gestión de Categorías',
              style: TextStyle(fontWeight: FontWeight.bold),
            ),
            centerTitle: true,
            backgroundColor: Colors.blue,
            elevation: 0,
          ),
          body: Container(
            decoration: BoxDecoration(
              gradient: LinearGradient(
                begin: Alignment.topCenter,
                end: Alignment.bottomCenter,
                colors: [Colors.blue.shade50, Colors.white],
              ),
            ),
            child: isLoading
                ? Center(child: CircularProgressIndicator())
                : categorias.isEmpty
                    ? Center(
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Icon(
                              Icons.category_outlined,
                              size: 80,
                              color: Colors.grey,
                            ),
                            SizedBox(height: 16),
                            Text(
                              'No hay categorías registradas',
                              style: TextStyle(
                                fontSize: 18,
                                color: Colors.grey,
                              ),
                            ),
                          ],
                        ),
                      )
                    : ListView.builder(
                        padding: EdgeInsets.all(16),
                        itemCount: categorias.length,
                        itemBuilder: (context, index) {
                          final categoria = categorias[index];
                          return Card(
                            elevation: 5,
                            margin: EdgeInsets.only(bottom: 16),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(15),
                            ),
                            child: ListTile(
                              contentPadding: EdgeInsets.all(16),
                              leading: CircleAvatar(
                                backgroundColor: Colors.blue,
                                child: Text(
                                  categoria['nombre'][0].toUpperCase(),
                                  style: TextStyle(
                                    color: Colors.white,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                              ),
                              title: Text(
                                categoria['nombre'],
                                style: TextStyle(
                                  fontWeight: FontWeight.bold,
                                  fontSize: 18,
                                ),
                              ),
                              subtitle: Text(
                                categoria['descripcion'],
                                style: TextStyle(color: Colors.grey[600]),
                              ),
                              trailing: Row(
                                mainAxisSize: MainAxisSize.min,
                                children: [
                                  IconButton(
                                    icon: Icon(Icons.edit),
                                    color: Colors.blue,
                                    onPressed: () {
                                      Navigator.pushNamed(
                                        context,
                                        'editar_categoria',
                                        arguments: categoria,
                                      ).then((_) => fetchCategorias());
                                    },
                                  ),
                                  IconButton(
                                    icon: Icon(Icons.delete),
                                    color: Colors.red,
                                    onPressed: () => _mostrarDialogoEliminar(categoria),
                                  ),
                                ],
                              ),
                            ),
                          );
                        },
                      ),
          ),
          floatingActionButton: FloatingActionButton.extended(
            onPressed: () {
              Navigator.pushNamed(context, 'crear_categoria')
                  .then((_) => fetchCategorias());
            },
            label: Text('Nueva Categoría'),
            icon: Icon(Icons.add),
            backgroundColor: Colors.blue,
          ),
        );
      }
    
      void _mostrarDialogoEliminar(dynamic categoria) {
        showDialog(
          context: context,
          builder: (BuildContext context) {
            return AlertDialog(
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(15),
              ),
              title: Text('Confirmar eliminación'),
              content: Text('¿Está seguro de eliminar esta categoría?'),
              actions: [
                TextButton(
                  child: Text('Cancelar'),
                  onPressed: () => Navigator.of(context).pop(),
                ),
                ElevatedButton(
                  child: Text('Eliminar'),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.red,
                    foregroundColor: Colors.white,
                  ),
                  onPressed: () {
                    Navigator.of(context).pop();
                    eliminarCategoria(int.parse(categoria['id'].toString()));
                  },
                ),
              ],
            );
          },
        );
      }
    }

6.  **crear_producto.dart**

Linea::

    import 'package:flutter/material.dart';
    import 'package:http/http.dart' as http;
    import 'dart:convert';
    
    class CrearProducto extends StatefulWidget {
      @override
      _CrearProductoState createState() => _CrearProductoState();
    }
    
    class _CrearProductoState extends State<CrearProducto> {
      final _formKey = GlobalKey<FormState>();
      final _nombreController = TextEditingController();
      final _descripcionController = TextEditingController();
      final _precioController = TextEditingController();
      final _stockController = TextEditingController();
      final _imagenUrlController = TextEditingController();
      
      List<dynamic> categorias = [];
      int? categoriaSeleccionada;
      bool _isLoading = false;
    
      @override
      void initState() {
        super.initState();
        fetchCategorias();
      }
    
      Future<void> fetchCategorias() async {
        try {
          final response = await http.get(
            Uri.parse('http://localhost/tienda/api_tienda.php?resource=categorias'),
          );
          if (response.statusCode == 200) {
            setState(() {
              categorias = json.decode(response.body);
            });
          }
        } catch (e) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('Error al cargar las categorías')),
          );
        }
      }
    
      Future<void> _guardarProducto() async {
        if (_formKey.currentState!.validate()) {
          setState(() {
            _isLoading = true;
          });
    
          try {
            final response = await http.post(
              Uri.parse('http://localhost/tienda/api_tienda.php?resource=productos'),
              headers: {'Content-Type': 'application/json'},
              body: jsonEncode({
                'nombre': _nombreController.text,
                'descripcion': _descripcionController.text,
                'precio': double.parse(_precioController.text),
                'stock': int.parse(_stockController.text),
                'categoria_id': categoriaSeleccionada,
                'imagen_url': _imagenUrlController.text,
              }),
            );
    
            if (response.statusCode == 200) {
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(
                  content: Text('Producto creado con éxito'),
                  backgroundColor: Colors.green,
                ),
              );
              Navigator.pop(context);
            }
          } catch (e) {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                content: Text('Error al crear el producto'),
                backgroundColor: Colors.red,
              ),
            );
          } finally {
            setState(() {
              _isLoading = false;
            });
          }
        }
      }
    
      @override
      Widget build(BuildContext context) {
        return Scaffold(
          appBar: AppBar(
            title: Text(
              'Nuevo Producto',
              style: TextStyle(fontWeight: FontWeight.bold),
            ),
            centerTitle: true,
            backgroundColor: Colors.green,
            elevation: 0,
          ),
          body: Container(
            decoration: BoxDecoration(
              gradient: LinearGradient(
                begin: Alignment.topCenter,
                end: Alignment.bottomCenter,
                colors: [Colors.green.shade50, Colors.white],
              ),
            ),
            child: SingleChildScrollView(
              padding: EdgeInsets.all(16.0),
              child: Card(
                elevation: 5,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(15),
                ),
                child: Padding(
                  padding: EdgeInsets.all(16.0),
                  child: Form(
                    key: _formKey,
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.stretch,
                      children: [
                        TextFormField(
                          controller: _nombreController,
                          decoration: InputDecoration(
                            labelText: 'Nombre del Producto',
                            border: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(10),
                            ),
                            prefixIcon: Icon(Icons.inventory),
                          ),
                          validator: (value) {
                            if (value == null || value.isEmpty) {
                              return 'Por favor ingrese el nombre del producto';
                            }
                            return null;
                          },
                        ),
                        SizedBox(height: 20),
                        TextFormField(
                          controller: _descripcionController,
                          decoration: InputDecoration(
                            labelText: 'Descripción',
                            border: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(10),
                            ),
                            prefixIcon: Icon(Icons.description),
                          ),
                          maxLines: 3,
                          validator: (value) {
                            if (value == null || value.isEmpty) {
                              return 'Por favor ingrese una descripción';
                            }
                            return null;
                          },
                        ),
                        SizedBox(height: 20),
                        Row(
                          children: [
                            Expanded(
                              child: TextFormField(
                                controller: _precioController,
                                decoration: InputDecoration(
                                  labelText: 'Precio',
                                  border: OutlineInputBorder(
                                    borderRadius: BorderRadius.circular(10),
                                  ),
                                  prefixIcon: Icon(Icons.attach_money),
                                ),
                                keyboardType: TextInputType.numberWithOptions(decimal: true),
                                validator: (value) {
                                  if (value == null || value.isEmpty) {
                                    return 'Ingrese el precio';
                                  }
                                  if (double.tryParse(value) == null) {
                                    return 'Precio inválido';
                                  }
                                  return null;
                                },
                              ),
                            ),
                            SizedBox(width: 20),
                            Expanded(
                              child: TextFormField(
                                controller: _stockController,
                                decoration: InputDecoration(
                                  labelText: 'Stock',
                                  border: OutlineInputBorder(
                                    borderRadius: BorderRadius.circular(10),
                                  ),
                                  prefixIcon: Icon(Icons.storage),
                                ),
                                keyboardType: TextInputType.number,
                                validator: (value) {
                                  if (value == null || value.isEmpty) {
                                    return 'Ingrese el stock';
                                  }
                                  if (int.tryParse(value) == null) {
                                    return 'Stock inválido';
                                  }
                                  return null;
                                },
                              ),
                            ),
                          ],
                        ),
                        SizedBox(height: 20),
                        DropdownButtonFormField<int>(
                          decoration: InputDecoration(
                            labelText: 'Categoría',
                            border: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(10),
                            ),
                            prefixIcon: Icon(Icons.category),
                          ),
                          value: categoriaSeleccionada,
                          items: categorias.map((categoria) {
                            return DropdownMenuItem(
                              value: int.parse(categoria['id'].toString()),
                              child: Text(categoria['nombre']),
                            );
                          }).toList(),
                          onChanged: (value) {
                            setState(() {
                              categoriaSeleccionada = value;
                            });
                          },
                          validator: (value) {
                            if (value == null) {
                              return 'Por favor seleccione una categoría';
                            }
                            return null;
                          },
                        ),
                        SizedBox(height: 20),
                        TextFormField(
                          controller: _imagenUrlController,
                          decoration: InputDecoration(
                            labelText: 'URL de la Imagen',
                            border: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(10),
                            ),
                            prefixIcon: Icon(Icons.image),
                            helperText: 'Ejemplo: http://localhost/tienda/images/nombre_imagen.jpg',
                            helperMaxLines: 2,
                          ),
                           validator: (value) {
                          if (value != null && value.isNotEmpty) {
                            if (!value.startsWith('http://') && !value.startsWith('https://')) {
                              return 'La URL debe comenzar con http:// o https://';
                            }
                            if (!value.toLowerCase().endsWith('.jpg') &&
                                !value.toLowerCase().endsWith('.jpeg') &&
                                !value.toLowerCase().endsWith('.png') &&
                                !value.toLowerCase().endsWith('.gif')) {
                              return 'La URL debe terminar con una extensión de imagen válida';
                            }
                          }
                          return null;
                        },
                        ),
                        SizedBox(height: 24),
                        ElevatedButton(
                          onPressed: _isLoading ? null : _guardarProducto,
                          child: _isLoading
                              ? SizedBox(
                                  height: 20,
                                  width: 20,
                                  child: CircularProgressIndicator(
                                    color: Colors.white,
                                    strokeWidth: 2,
                                  ),
                                )
                              : Text(
                                  'Guardar Producto',
                                  style: TextStyle(fontSize: 16),
                                ),
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.green,
                            padding: EdgeInsets.symmetric(vertical: 15),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(10),
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            ),
          ),
        );
      }
    }


7.  **editar_producto.dart**

Linea::

    import 'package:flutter/material.dart';
    import 'package:http/http.dart' as http;
    import 'dart:convert';
    
    class EditarProducto extends StatefulWidget {
      @override
      _EditarProductoState createState() => _EditarProductoState();
    }
    
    class _EditarProductoState extends State<EditarProducto> {
      final _formKey = GlobalKey<FormState>();
      final _nombreController = TextEditingController();
      final _descripcionController = TextEditingController();
      final _precioController = TextEditingController();
      final _stockController = TextEditingController();
      final _imagenUrlController = TextEditingController();
      
      List<dynamic> categorias = [];
      int? categoriaSeleccionada;
      bool _isLoading = false;
      late Map<String, dynamic> producto;
    
      @override
      void initState() {
        super.initState();
        fetchCategorias();
      }
    
      @override
      void didChangeDependencies() {
        super.didChangeDependencies();
        producto = ModalRoute.of(context)!.settings.arguments as Map<String, dynamic>;
        _nombreController.text = producto['nombre'];
        _descripcionController.text = producto['descripcion'];
        _precioController.text = producto['precio'].toString();
        _stockController.text = producto['stock'].toString();
        _imagenUrlController.text = producto['imagen_url'] ?? '';
        categoriaSeleccionada = int.parse(producto['categoria_id'].toString());
      }
    
      Future<void> fetchCategorias() async {
        try {
          final response = await http.get(
            Uri.parse('http://localhost/tienda/api_tienda.php?resource=categorias'),
          );
          if (response.statusCode == 200) {
            setState(() {
              categorias = json.decode(response.body);
            });
          }
        } catch (e) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('Error al cargar las categorías')),
          );
        }
      }
    
      Future<void> _actualizarProducto() async {
        if (_formKey.currentState!.validate()) {
          setState(() {
            _isLoading = true;
          });
    
          try {
            final response = await http.put(
              Uri.parse('http://localhost/tienda/api_tienda.php?resource=productos'),
              headers: {'Content-Type': 'application/json'},
              body: jsonEncode({
                'id': producto['id'],
                'nombre': _nombreController.text,
                'descripcion': _descripcionController.text,
                'precio': double.parse(_precioController.text),
                'stock': int.parse(_stockController.text),
                'categoria_id': categoriaSeleccionada,
                'imagen_url': _imagenUrlController.text,
              }),
            );
    
            if (response.statusCode == 200) {
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(
                  content: Text('Producto actualizado con éxito'),
                  backgroundColor: Colors.green,
                ),
              );
              Navigator.pop(context);
            }
          } catch (e) {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                content: Text('Error al actualizar el producto'),
                backgroundColor: Colors.red,
              ),
            );
          } finally {
            setState(() {
              _isLoading = false;
            });
          }
        }
      }
    
      @override
      Widget build(BuildContext context) {
        return Scaffold(
          appBar: AppBar(
            title: Text(
              'Editar Producto',
              style: TextStyle(fontWeight: FontWeight.bold),
            ),
            centerTitle: true,
            backgroundColor: Colors.green,
            elevation: 0,
          ),
          body: Container(
            decoration: BoxDecoration(
              gradient: LinearGradient(
                begin: Alignment.topCenter,
                end: Alignment.bottomCenter,
                colors: [Colors.green.shade50, Colors.white],
              ),
            ),
            child: SingleChildScrollView(
              padding: EdgeInsets.all(16.0),
              child: Card(
                elevation: 5,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(15),
                ),
                child: Padding(
                  padding: EdgeInsets.all(16.0),
                  child: Form(
                    key: _formKey,
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.stretch,
                      children: [
                        if (_imagenUrlController.text.isNotEmpty)
                          Container(
                            height: 200,
                            margin: EdgeInsets.only(bottom: 20),
                            decoration: BoxDecoration(
                              borderRadius: BorderRadius.circular(10),
                              image: DecorationImage(
                                image: NetworkImage(_imagenUrlController.text),
                                fit: BoxFit.cover,
                              ),
                            ),
                          ),
                        TextFormField(
                          controller: _nombreController,
                          decoration: InputDecoration(
                            labelText: 'Nombre del Producto',
                            border: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(10),
                            ),
                            prefixIcon: Icon(Icons.inventory),
                          ),
                          validator: (value) {
                            if (value == null || value.isEmpty) {
                              return 'Por favor ingrese el nombre del producto';
                            }
                            return null;
                          },
                        ),
                        SizedBox(height: 20),
                        TextFormField(
                          controller: _descripcionController,
                          decoration: InputDecoration(
                            labelText: 'Descripción',
                            border: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(10),
                            ),
                            prefixIcon: Icon(Icons.description),
                          ),
                          maxLines: 3,
                          validator: (value) {
                            if (value == null || value.isEmpty) {
                              return 'Por favor ingrese una descripción';
                            }
                            return null;
                          },
                        ),
                        SizedBox(height: 20),
                        Row(
                          children: [
                            Expanded(
                              child: TextFormField(
                                controller: _precioController,
                                decoration: InputDecoration(
                                  labelText: 'Precio',
                                  border: OutlineInputBorder(
                                    borderRadius: BorderRadius.circular(10),
                                  ),
                                  prefixIcon: Icon(Icons.attach_money),
                                ),
                                keyboardType: TextInputType.numberWithOptions(decimal: true),
                                validator: (value) {
                                  if (value == null || value.isEmpty) {
                                    return 'Ingrese el precio';
                                  }
                                  if (double.tryParse(value) == null) {
                                    return 'Precio inválido';
                                  }
                                  return null;
                                },
                              ),
                            ),
                            SizedBox(width: 20),
                            Expanded(
                              child: TextFormField(
                                controller: _stockController,
                                decoration: InputDecoration(
                                  labelText: 'Stock',
                                  border: OutlineInputBorder(
                                    borderRadius: BorderRadius.circular(10),
                                  ),
                                  prefixIcon: Icon(Icons.storage),
                                ),
                                keyboardType: TextInputType.number,
                                validator: (value) {
                                  if (value == null || value.isEmpty) {
                                    return 'Ingrese el stock';
                                  }
                                  if (int.tryParse(value) == null) {
                                    return 'Stock inválido';
                                  }
                                  return null;
                                },
                              ),
                            ),
                          ],
                        ),
                        SizedBox(height: 20),
                        DropdownButtonFormField<int>(
                          decoration: InputDecoration(
                            labelText: 'Categoría',
                            border: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(10),
                            ),
                            prefixIcon: Icon(Icons.category),
                          ),
                          value: categoriaSeleccionada,
                          items: categorias.map((categoria) {
                            return DropdownMenuItem(
                              value: int.parse(categoria['id'].toString()),
                              child: Text(categoria['nombre']),
                            );
                          }).toList(),
                          onChanged: (value) {
                            setState(() {
                              categoriaSeleccionada = value;
                            });
                          },
                          validator: (value) {
                            if (value == null) {
                              return 'Por favor seleccione una categoría';
                            }
                            return null;
                          },
                        ),
                        SizedBox(height: 20),
                        TextFormField(
                          controller: _imagenUrlController,
                          decoration: InputDecoration(
                            labelText: 'URL de la Imagen',
                            border: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(10),
                            ),
                            prefixIcon: Icon(Icons.image),
                            helperText: 'Ejemplo: http://localhost/tienda/images/nombre_imagen.jpg',
                            helperMaxLines: 2,
                          ),
                           validator: (value) {
                            if (value != null && value.isNotEmpty) {
                              if (!value.startsWith('http://') && !value.startsWith('https://')) {
                                return 'La URL debe comenzar con http:// o https://';
                              }
                              if (!value.toLowerCase().endsWith('.jpg') &&
                                  !value.toLowerCase().endsWith('.jpeg') &&
                                  !value.toLowerCase().endsWith('.png') &&
                                  !value.toLowerCase().endsWith('.gif')) {
                                return 'La URL debe terminar con una extensión de imagen válida';
                              }
                            }
                            return null;
                          },
                        ),
                        SizedBox(height: 24),
                        ElevatedButton(
                          onPressed: _isLoading ? null : _actualizarProducto,
                          child: _isLoading
                              ? SizedBox(
                                  height: 20,
                                  width: 20,
                                  child: CircularProgressIndicator(
                                    color: Colors.white,
                                    strokeWidth: 2,
                                  ),
                                )
                              : Text(
                                  'Actualizar Producto',
                                  style: TextStyle(fontSize: 16),
                                ),
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.green,
                            padding: EdgeInsets.symmetric(vertical: 15),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(10),
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            ),
          ),
        );
      }
    }

8. **lista_productos.dart**

Linea::

    import 'package:flutter/material.dart';
    import 'package:http/http.dart' as http;
    import 'dart:convert';
    
    class ListaProductos extends StatefulWidget {
      @override
      _ListaProductosState createState() => _ListaProductosState();
    }
    
    class _ListaProductosState extends State<ListaProductos> {
      List<dynamic> productos = [];
      bool isLoading = true;
    
      @override
      void initState() {
        super.initState();
        fetchProductos();
      }
    
      Future<void> fetchProductos() async {
        try {
          final response = await http.get(
            Uri.parse('http://localhost/tienda/api_tienda.php?resource=productos'),
          );
          if (response.statusCode == 200) {
            setState(() {
              productos = json.decode(response.body);
              isLoading = false;
            });
          }
        } catch (e) {
          setState(() {
            isLoading = false;
          });
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('Error al cargar los productos')),
          );
        }
      }
    
      Future<void> eliminarProducto(int id) async {
        try {
          final response = await http.delete(
            Uri.parse('http://localhost/tienda/api_tienda.php?resource=productos&id=$id'),
          );
          if (response.statusCode == 200) {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                content: Text('Producto eliminado con éxito'),
                backgroundColor: Colors.green,
              ),
            );
            fetchProductos();
          }
        } catch (e) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('Error al eliminar el producto'),
              backgroundColor: Colors.red,
            ),
          );
        }
      }
    
      @override
      Widget build(BuildContext context) {
        return Scaffold(
          appBar: AppBar(
            title: Text(
              'Gestión de Productos',
              style: TextStyle(fontWeight: FontWeight.bold),
            ),
            centerTitle: true,
            backgroundColor: Colors.green,
            elevation: 0,
          ),
          body: Container(
            decoration: BoxDecoration(
              gradient: LinearGradient(
                begin: Alignment.topCenter,
                end: Alignment.bottomCenter,
                colors: [Colors.green.shade50, Colors.white],
              ),
            ),
            child: isLoading
                ? Center(child: CircularProgressIndicator())
                : productos.isEmpty
                    ? Center(
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Icon(
                              Icons.inventory_outlined,
                              size: 80,
                              color: Colors.grey,
                            ),
                            SizedBox(height: 16),
                            Text(
                              'No hay productos registrados',
                              style: TextStyle(
                                fontSize: 18,
                                color: Colors.grey,
                              ),
                            ),
                          ],
                        ),
                      )
                    : ListView.builder(
                        padding: EdgeInsets.all(16),
                        itemCount: productos.length,
                        itemBuilder: (context, index) {
                          final producto = productos[index];
                          return Card(
                            elevation: 5,
                            margin: EdgeInsets.only(bottom: 16),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(15),
                            ),
                            child: Column(
                              children: [
                                producto['imagen_url'] != null &&
                                        producto['imagen_url'].isNotEmpty
                                    ? ClipRRect(
                                        borderRadius: BorderRadius.vertical(
                                            top: Radius.circular(15)),
                                        child: Image.network(
                                          producto['imagen_url'],
                                          height: 200,
                                          width: double.infinity,
                                          fit: BoxFit.cover,
                                          errorBuilder: (context, error, stackTrace) {
                                            return Container(
                                              height: 200,
                                              color: Colors.grey[200],
                                              child: Icon(
                                                Icons.image_not_supported,
                                                size: 50,
                                                color: Colors.grey[400],
                                              ),
                                            );
                                          },
                                        ),
                                      )
                                    : Container(
                                        height: 200,
                                        color: Colors.grey[200],
                                        child: Icon(
                                          Icons.image_not_supported,
                                          size: 50,
                                          color: Colors.grey[400],
                                        ),
                                      ),
                                Padding(
                                  padding: EdgeInsets.all(16),
                                  child: Column(
                                    crossAxisAlignment: CrossAxisAlignment.start,
                                    children: [
                                      Text(
                                        producto['nombre'],
                                        style: TextStyle(
                                          fontSize: 20,
                                          fontWeight: FontWeight.bold,
                                        ),
                                      ),
                                      SizedBox(height: 8),
                                      Text(
                                        producto['descripcion'],
                                        style: TextStyle(
                                          color: Colors.grey[600],
                                          fontSize: 16,
                                        ),
                                      ),
                                      SizedBox(height: 16),
                                      Row(
                                        mainAxisAlignment:
                                            MainAxisAlignment.spaceBetween,
                                        children: [
                                          Column(
                                            crossAxisAlignment:
                                                CrossAxisAlignment.start,
                                            children: [
                                              Text(
                                                'Precio: \$${double.parse(producto['precio'].toString()).toStringAsFixed(2)}',
                                                style: TextStyle(
                                                  fontSize: 18,
                                                  color: Colors.green,
                                                  fontWeight: FontWeight.bold,
                                                ),
                                              ),
                                              Text(
                                                'Stock: ${producto['stock']}',
                                                style: TextStyle(
                                                  fontSize: 16,
                                                  color: Colors.grey[600],
                                                ),
                                              ),
                                            ],
                                          ),
                                          Row(
                                            children: [
                                              IconButton(
                                                icon: Icon(Icons.edit),
                                                color: Colors.blue,
                                                onPressed: () {
                                                  Navigator.pushNamed(
                                                    context,
                                                    'editar_producto',
                                                    arguments: producto,
                                                  ).then((_) => fetchProductos());
                                                },
                                              ),
                                              IconButton(
                                                icon: Icon(Icons.delete),
                                                color: Colors.red,
                                                onPressed: () =>
                                                    _mostrarDialogoEliminar(producto),
                                              ),
                                            ],
                                          ),
                                        ],
                                      ),
                                    ],
                                  ),
                                ),
                              ],
                            ),
                          );
                        },
                      ),
          ),
          floatingActionButton: FloatingActionButton.extended(
            onPressed: () {
              Navigator.pushNamed(context, 'crear_producto')
                  .then((_) => fetchProductos());
            },
            label: Text('Nuevo Producto'),
            icon: Icon(Icons.add),
            backgroundColor: Colors.green,
          ),
        );
      }
    
      void _mostrarDialogoEliminar(dynamic producto) {
        showDialog(
          context: context,
          builder: (BuildContext context) {
            return AlertDialog(
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(15),
              ),
              title: Text('Confirmar eliminación'),
              content: Text('¿Está seguro de eliminar este producto?'),
              actions: [
                TextButton(
                  child: Text('Cancelar'),
                  onPressed: () => Navigator.of(context).pop(),
                ),
                ElevatedButton(
                  child: Text('Eliminar'),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.red,
                    foregroundColor: Colors.white,
                  ),
                  onPressed: () {
                    Navigator.of(context).pop();
                    eliminarProducto(int.parse(producto['id'].toString()));
                  },
                ),
              ],
            );
          },
        );
      }
    }

6.  **main.dart**

Linea::

    import 'package:flutter/material.dart';
    import 'package:google_fonts/google_fonts.dart';
    import 'package:apptienda/src/screens/categorias/crear_categoria.dart';
    import 'package:apptienda/src/screens/categorias/editar_categoria.dart';
    import 'package:apptienda/src/screens/categorias/lista_categorias.dart';
    import 'package:apptienda/src/screens/productos/crear_producto.dart';
    import 'package:apptienda/src/screens/productos/editar_producto.dart';
    import 'package:apptienda/src/screens/productos/lista_productos.dart';
    
    void main() {
      runApp(MyApp());
    }
    
    class MyApp extends StatelessWidget {
      @override
      Widget build(BuildContext context) {
        return MaterialApp(
          title: 'Tienda App',
          theme: ThemeData(
            primarySwatch: Colors.blue,
            textTheme: GoogleFonts.poppinsTextTheme(),
            elevatedButtonTheme: ElevatedButtonThemeData(
              style: ElevatedButton.styleFrom(
                elevation: 8,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(15),
                ),
              ),
            ),
            cardTheme: CardTheme(
              elevation: 5,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(15),
              ),
            ),
          ),
          debugShowCheckedModeBanner: false,
          initialRoute: '/',
          routes: {
            '/': (context) => HomePage(),
            'lista_categorias': (context) => ListaCategorias(),
            'crear_categoria': (context) => CrearCategoria(),
            'editar_categoria': (context) => EditarCategoria(),
            'lista_productos': (context) => ListaProductos(),
            'crear_producto': (context) => CrearProducto(),
            'editar_producto': (context) => EditarProducto(),
          },
        );
      }
    }
    
    class HomePage extends StatelessWidget {
      @override
      Widget build(BuildContext context) {
        return Scaffold(
          body: Container(
            decoration: BoxDecoration(
              gradient: LinearGradient(
                begin: Alignment.topCenter,
                end: Alignment.bottomCenter,
                colors: [
                  Colors.blue.shade50,
                  Colors.white,
                ],
              ),
            ),
            child: SafeArea(
              child: Column(
                children: [
                  // Header con logo
                  Container(
                    width: double.infinity,
                    padding: EdgeInsets.all(20),
                    decoration: BoxDecoration(
                      color: Colors.white,
                      borderRadius: BorderRadius.only(
                        bottomLeft: Radius.circular(30),
                        bottomRight: Radius.circular(30),
                      ),
                      boxShadow: [
                        BoxShadow(
                          color: Colors.grey.withOpacity(0.2),
                          spreadRadius: 2,
                          blurRadius: 5,
                          offset: Offset(0, 3),
                        ),
                      ],
                    ),
                    child: Column(
                      children: [
                        Image.asset(
                          'assets/images/logo.png', // Asegúrate de tener esta ruta correctamente configurada
                          height: 120,
                          errorBuilder: (context, error, stackTrace) {
                            return Icon(
                              Icons.store,
                              size: 120,
                              color: Colors.blue,
                            );
                          },
                        ),
                        SizedBox(height: 20),
                        Text(
                          'Sistema de Gestión',
                          style: TextStyle(
                            fontSize: 24,
                            fontWeight: FontWeight.bold,
                            color: Colors.blue.shade900,
                          ),
                        ),
                      ],
                    ),
                  ),
    
                  // Menú principal
                  Expanded(
                    child: Padding(
                      padding: EdgeInsets.all(20),
                      child: GridView.count(
                        crossAxisCount: 2,
                        crossAxisSpacing: 20,
                        mainAxisSpacing: 20,
                        children: [
                          _buildMenuCard(
                            context,
                            'Categorías',
                            Icons.category,
                            Colors.blue,
                            'lista_categorias',
                          ),
                          _buildMenuCard(
                            context,
                            'Productos',
                            Icons.inventory,
                            Colors.green,
                            'lista_productos',
                          ),
                        ],
                      ),
                    ),
                  ),
    
                  // Footer
                  Padding(
                    padding: EdgeInsets.all(20),
                    child: Text(
                      '© 2024 Tienda App',
                      style: TextStyle(
                        color: Colors.grey,
                        fontSize: 12,
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
        );
      }
    
      Widget _buildMenuCard(
          BuildContext context, String title, IconData icon, Color color, String route) {
        return Card(
          elevation: 5,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(15),
          ),
          child: InkWell(
            onTap: () => Navigator.pushNamed(context, route),
            borderRadius: BorderRadius.circular(15),
            child: Container(
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                  colors: [
                    color.withOpacity(0.7),
                    color,
                  ],
                ),
                borderRadius: BorderRadius.circular(15),
              ),
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Container(
                    padding: EdgeInsets.all(15),
                    decoration: BoxDecoration(
                      color: Colors.white.withOpacity(0.2),
                      shape: BoxShape.circle,
                    ),
                    child: Icon(
                      icon,
                      size: 40,
                      color: Colors.white,
                    ),
                  ),
                  SizedBox(height: 15),
                  Text(
                    title,
                    style: TextStyle(
                      color: Colors.white,
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  SizedBox(height: 5),
                  Text(
                    'Gestionar',
                    style: TextStyle(
                      color: Colors.white.withOpacity(0.8),
                      fontSize: 12,
                    ),
                  ),
                ],
              ),
            ),
          ),
        );
      }
    }

7.  *pubspec.yaml**

Linea::

    name: apptienda
    description: "A new Flutter project."
    publish_to: 'none'
    version: 1.0.0+1
    
    environment:
      sdk: ^3.5.1
    
    dependencies:
      flutter:
        sdk: flutter
      http: ^0.13.3
      cupertino_icons: ^1.0.8
      google_fonts: ^4.0.4  # Dependencias versión
    
    dev_dependencies:
      flutter_test:
        sdk: flutter
      flutter_lints: ^4.0.0
    
    flutter:
      uses-material-design: true
      
      assets:
        - assets/images/  # Aquí irán las imágenes

8.  Para poder visualizar las imágenes dentro de los TextView en Flutter, deberá crear un nuevo fichero de nombre *.htaccess*, dentro de la carpeta raiz.

Linea::

    <IfModule mod_headers.c>
        Header set Access-Control-Allow-Origin "*"
        Header set Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS"
        Header set Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization"
    </IfModule>
